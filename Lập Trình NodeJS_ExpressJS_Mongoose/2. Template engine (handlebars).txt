*Giúp viết ra các file chứa HTML/chia layout dễ sử dụng
1. npm i express-handlebars

2. src/index.js
const { engine } = require('express-handlebars');
// view engine setup
app.engine('hbs', engine({ extname: '.hbs' })); // Thay đổi đuôi file engine
app.set('view engine', 'hbs'); // chỉ định app sử dụng engine handlebars
app.set('views', path.join(__dirname, 'views')); // định lại vị trí cho thư mục views

3. Cấu trúc engine:
.
├── app.js
└── views
    ├── home.hbs
    └── layouts
        └── main.hbs

4. Tại views/layouts/main.hbs
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NodeJS & ExpressJS</title>
</head>
<body>
    <div id="app">
        <header id="header"></header>
        <div id="content">
            {{{body}}}
        </div>
        <footer id="footer"></footer>
    </div>
</body>
</html>

** ĐỂ TẠO CÁC THÀNH PHẦN DÙNG CHUNG TA TẠO file views/partials
+ header.hbs
+ footer.hbs
** SỬ DỤNG TRONG views/layouts/main.hbs
<header id="header">{{> header }}</header>
<footer id="footer">{{> footer }}</footer>

5. Viết các file khác bình thường (chỉ viết phần trong body)

6. Trả về cho server
// [GET]: /api/v1/users/welcome
  welcome: async (req, res) => {
    try {
      const data = await User.find({});
      res.render('$PATCH VIEW WITH ROOT IS VIEWS', {data nếu có});
    } catch (err) {
      res.status(500).json({ message: err.message });
    }
  },

7. Bên view nhận data
+ string,number: {{$NAME}}
+ array: [1,2,3,4,5]
{{#each data}}
    <li>{{this}}</li>
{{/each}}
+ array: [Object]
{{#each data}}
    <li>{{this.$KEY}}</li>
{{/each}}
+ object {}
{{object.$KEY}}
